plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
}

version = "${project.mod_version}-${project.minecraft_version}"
group = project.maven_group

repositories {
	mavenCentral()

	// Andere Repositories hier ...
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Uncomment the following line to enable the deprecated Fabric API modules.
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.
	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"

	// F체gen Sie die Abh채ngigkeit f체r javax.websocket-client hinzu
	implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
	implementation group: 'org.glassfish.tyrus.bundles', name: 'tyrus-standalone-client', version: '1.9'
	implementation 'org.java-websocket:Java-WebSocket:1.5.5'
	implementation 'io.projectreactor:reactor-core:3.4.13'
	implementation project(":Api")
	include group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
	include group: 'org.glassfish.tyrus.bundles', name: 'tyrus-standalone-client', version: '1.9'
	include 'org.java-websocket:Java-WebSocket:1.5.5'
	include 'io.projectreactor:reactor-core:3.4.13'
	include 'org.reactivestreams:reactive-streams:1.0.4'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
	testImplementation 'org.mockito:mockito-core:4.2.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:4.2.0'
	testImplementation 'io.projectreactor:reactor-test:3.4.13'
}

test {
	useJUnitPlatform()
}

base {
	archivesName = project.archives_base_name
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for retrieving dependencies.
	}
}

tasks.register('generateVersion', Copy) {
	doFirst {
		delete 'src/main/java/de/alive/pricecxn/Version.java'
		println "mod_version is: ${project.mod_version}"
	}
	from 'src/templates/version_template.java'
	into 'src/main/java/de/alive/pricecxn/'
	include 'version_template.java'
	rename 'version_template.java', 'Version.java'
	expand(version: project.mod_version)
	doLast {
		println "generateVersion task has been executed"
	}
	outputs.upToDateWhen { false } // F체ge diese Zeile hinzu
}

tasks.named('compileJava').configure {
	dependsOn 'generateVersion'
}

tasks.named('sourcesJar').configure {
	dependsOn 'generateVersion'
}

tasks.named('build').configure {
	dependsOn 'generateVersion'
}

tasks.register('incrementMajorVersion') {
	doLast {
		def propertiesFile = file('gradle.properties')
		def properties = new Properties()
		properties.load(propertiesFile.newDataInputStream())

		def version = properties.getProperty('mod_version')
		def versionParts = version.split('\\.')
		versionParts[0] = (versionParts[0] as Integer) + 1
		versionParts[1] = 0
		versionParts[2] = 0

		def newVersion = versionParts.join('.')
		println "Increasing major version to: $newVersion"

		properties.setProperty('mod_version', newVersion)
		properties.store(propertiesFile.newWriter(), null)
	}
}

tasks.register('incrementMinorVersion') {
	doLast {
		def propertiesFile = file('gradle.properties')
		def properties = new Properties()
		properties.load(propertiesFile.newDataInputStream())

		def version = properties.getProperty('mod_version')
		def versionParts = version.split('\\.')
		versionParts[1] = (versionParts[1] as Integer) + 1
		versionParts[2] = 0

		def newVersion = versionParts.join('.')
		println "Increasing intermediate version to: $newVersion"

		properties.setProperty('mod_version', newVersion)
		properties.store(propertiesFile.newWriter(), null)
	}
}

tasks.register('incrementPatchVersion') {
	doLast {
		def propertiesFile = file('gradle.properties')
		def properties = new Properties()
		properties.load(propertiesFile.newDataInputStream())

		def version = properties.getProperty('mod_version')
		def versionParts = version.split('\\.')
		versionParts[2] = (versionParts[2] as Integer) + 1

		def newVersion = versionParts.join('.')
		println "Increasing minor version to: $newVersion"

		properties.setProperty('mod_version', newVersion) // Ensure you're setting the correct property name
		properties.store(propertiesFile.newWriter(), null)
	}
}