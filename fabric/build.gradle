plugins {
    id ('fabric-loom') version '1.6-SNAPSHOT'
    id 'java'
}

version = "${project(":").property("mod_version")}"
group = "${project.property("maven_group")}"

repositories {
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    implementation project(path: ":api")
    implementation project(path: ":impl")
    implementation project(path: ":inventoryscanner")
    implementation project(path: ":listener")

    implementation(project(path: ":fabric-versions:fabric_1_20_4", configuration: "namedElements"))
    implementation(project(path: ":fabric-versions:fabric_1_20_5", configuration: "namedElements"))
    implementation(project(path: ":fabric-versions:fabric_1_20_6", configuration: "namedElements"))

    include group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    include group: 'org.glassfish.tyrus.bundles', name: 'tyrus-standalone-client', version: '2.1.5'
    include 'org.java-websocket:Java-WebSocket:1.5.6'
    include 'io.projectreactor:reactor-core:3.6.5'
    include 'org.reactivestreams:reactive-streams:1.0.4'

    include project(path: ":impl")
    include project(path: ":api")


    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.register("includeFabricVersions", Jar) {
    duplicatesStrategy = DuplicatesStrategy.WARN

    dependsOn project(":fabric-versions").tasks.named("build")
    logger.lifecycle("Starting to include 'fabric-versions' artifacts from subprojects")

    def partArtifacts = project.configurations.archives.allArtifacts.stream()
            .filter { a -> a.file.name.contains("fabric") }
            .map { a -> a.file }
            .toList()

    def fabricVersionArtifacts = project(":fabric-versions").configurations.archives.allArtifacts.stream()
            .peek { file -> logger.lifecycle("Checking artifact: ${file.file.name}") }
            .filter { a -> a.file.name.contains("fabric-versions") }
            .map { a -> a.file }
            .peek { file -> logger.lifecycle("Including artifact: ${file}") }
            .toList()

    def allArtifacts = fabricVersionArtifacts + partArtifacts

    if (allArtifacts.isEmpty()) {
        logger.lifecycle("No 'fabric-versions-' artifacts found in ${project(":fabric-versions").name}")
    } else {
        from(allArtifacts.collect { zipTree(it) }){
            exclude "fabric.mod.json"
        }
    }
}

build.finalizedBy(includeFabricVersions)