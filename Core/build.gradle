plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
    id 'checkstyle'
}

version = "${project.mod_version}-${project.minecraft_version}"
group = project.maven_group

repositories {
    mavenCentral()
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Uncomment the following line to enable the deprecated Fabric API modules.
    // These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.
    // modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"

    // F체gen Sie die Abh채ngigkeit f체r javax.websocket-client hinzu
    implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    implementation group: 'org.glassfish.tyrus.bundles', name: 'tyrus-standalone-client', version: '2.1.5'
    implementation 'org.java-websocket:Java-WebSocket:1.5.6'
    implementation 'io.projectreactor:reactor-core:3.6.5'
    implementation project(path: ":Api", configuration: "namedElements")
    implementation project(path: ":InventoryScanner")
    implementation project(path: ":Listener")

    include group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    include group: 'org.glassfish.tyrus.bundles', name: 'tyrus-standalone-client', version: '2.1.5'
    include 'org.java-websocket:Java-WebSocket:1.5.6'
    include 'io.projectreactor:reactor-core:3.6.5'
    include 'org.reactivestreams:reactive-streams:1.0.4'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'
    testImplementation 'io.projectreactor:reactor-test:3.6.5'
}

test {
    useJUnitPlatform()
}

base {
    archivesName = project.archives_base_name
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}"}
    }
}

tasks.register('generateVersion', Copy) {
    doFirst {
        delete 'src/main/java/de/alive/preiscxn/Version.java'
        println "mod_version is: ${project.mod_version}"
    }
    from 'src/templates/version_template.java'
    into 'src/main/java/de/alive/preiscxn/'
    include 'version_template.java'
    rename 'version_template.java', 'Version.java'
    expand(version: project.mod_version)
    doLast {
        println "generateVersion task has been executed"
    }
    outputs.upToDateWhen { false } // F체ge diese Zeile hinzu
}

tasks.named('compileJava').configure {
    dependsOn 'generateVersion'
}

tasks.named('sourcesJar').configure {
    dependsOn 'generateVersion'
}

tasks.named('build').configure {
    dependsOn 'generateVersion'
    dependsOn checkstyleMain
}